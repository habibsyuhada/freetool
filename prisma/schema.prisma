generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

model Account {
  id                String  @id
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("public")
}

model Habit {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  userId      String        @db.Uuid
  User        User          @relation(fields: [userId], references: [id])
  HabitRecord HabitRecord[]

  @@schema("public")
}

model HabitRecord {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique
  completed Boolean  @default(false)
  habitId   Int
  Habit     Habit    @relation(fields: [habitId], references: [id])

  @@schema("public")
}

model User {
  id            String    @id @db.Uuid
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Account       Account[]
  Habit         Habit[]
  Document      documentinteractive[]

  @@schema("auth")
}

model currency {
  base_code        String    @id @db.VarChar
  conversion_rates String?
  update_date      DateTime? @db.Timestamp(6)

  @@schema("public")
}

model documentinteractive {
  id            Int                           @id @default(autoincrement())
  name          String                        @db.VarChar
  desc          String?                       @db.VarChar
  document_html String?                       @db.Text
  userId        String                        @db.Uuid
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @default(now()) @updatedAt
  variables     documentinteractive_variable[]
  user          User                          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@schema("public")
}

model master_currency {
  code String  @id @db.VarChar
  name String? @db.VarChar

  @@schema("public")
}

model documentinteractive_variable {
  id          Int                  @id @default(autoincrement())
  document    documentinteractive  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  Int
  name        String?              @db.VarChar
  value       String?              @db.VarChar

  @@index([documentId])
  @@schema("public")
}
